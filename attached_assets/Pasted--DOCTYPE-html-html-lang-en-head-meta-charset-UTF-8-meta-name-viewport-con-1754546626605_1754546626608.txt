<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Interactive Build Demo</title>
    <style>
        :root {
            --bg-color: #FFFFFF;
            --panel-bg: #F5F5F5;
            --accent-color: #000000;
            --text-color: #333333;
            --blueprint-stroke: #000000;
            --blueprint-fill: #FFFFFF;
            --blueprint-text: #000000;
            --user-bubble: #007BFF;
            --ai-bubble: #D3D3D3;
            --font-family: 'Helvetica', 'Arial', sans-serif;
        }

        body {
            background-color: var(--bg-color);
            color: var(--text-color);
            font-family: var(--font-family);
            margin: 0;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            overflow: hidden;
        }

        #app-container {
            display: grid;
            grid-template-columns: 1fr 2fr;
            gap: 20px;
            width: 95vw;
            height: calc(95vw * 0.75);
            max-width: 1400px;
            max-height: 90vh;
            background-color: var(--panel-bg);
            border: 1px solid #E0E0E0;
            border-radius: 15px;
            padding: 20px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
        }

        #chat-panel {
            background-color: var(--bg-color);
            border-radius: 10px;
            display: flex;
            flex-direction: column;
            overflow: hidden;
            border: 1px solid #E0E0E0;
        }

        #chat-header {
            padding: 15px;
            background: var(--accent-color);
            color: white;
            font-weight: bold;
            text-align: center;
        }

        #chat-messages {
            flex-grow: 1;
            padding: 15px;
            overflow-y: auto;
            display: flex;
            flex-direction: column;
            gap: 15px;
        }

        .chat-bubble {
            padding: 10px 15px;
            border-radius: 10px;
            max-width: 85%;
            display: flex;
            align-items: flex-start;
            gap: 10px;
            opacity: 0;
            transform: translateY(20px);
            transition: opacity 0.5s ease-out, transform 0.5s ease-out;
            line-height: 1.4;
        }

        .chat-bubble.visible {
            opacity: 1;
            transform: translateY(0);
        }

        .chat-bubble.user {
            background-color: var(--user-bubble);
            color: white;
            align-self: flex-end;
        }

        .chat-bubble.ai {
            background-color: var(--ai-bubble);
            color: var(--text-color);
            align-self: flex-start;
        }

        .chat-bubble .avatar {
            font-size: 1.5rem;
            line-height: 1;
            padding-top: 2px;
        }

        .chat-bubble .text-content {
            min-height: 1.2em;
        }

        .typing-cursor {
            display: inline-block;
            width: 8px;
            height: 1em;
            background-color: currentColor;
            animation: blink 1s step-end infinite;
            vertical-align: bottom;
        }

        @keyframes blink {
            from, to { background-color: transparent }
            50% { background-color: currentColor; }
        }

        #blueprint-panel {
            background-color: var(--bg-color);
            border-radius: 10px;
            overflow: hidden;
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 10px;
            position: relative;
        }

        #start-button {
            position: absolute;
            z-index: 100;
            padding: 15px 30px;
            font-size: 1.5rem;
            font-family: var(--font-family);
            background-color: var(--user-bubble);
            color: white;
            border: none;
            border-radius: 10px;
            cursor: pointer;
            transition: transform 0.2s, background-color 0.2s;
        }

        #start-button:hover {
            transform: scale(1.05);
            background-color: #3395FF;
        }

        #blueprint-svg {
            width: 100%;
            height: 100%;
        }

        .svg-anim {
            opacity: 0;
            transition: opacity 0.7s ease-in-out;
        }

        .svg-anim.visible {
            opacity: 1;
        }

        .svg-line {
            transition: stroke-dashoffset 1.5s ease-in-out;
        }

        .svg-line.drawn {
            stroke-dashoffset: 0 !important;
        }

        .subgraph-rect {
            stroke: var(--accent-color);
            stroke-width: 1;
            fill: rgba(0, 0, 0, 0.05);
        }

        .node-rect {
            fill: var(--blueprint-fill);
            stroke: var(--blueprint-stroke);
            stroke-width: 1.5;
        }

        .node-text {
            fill: var(--blueprint-text);
            font-family: var(--font-family);
            font-size: 12px;
            text-anchor: middle;
            dominant-baseline: middle;
        }

        .subgraph-text {
            fill: var(--text-color);
            font-family: var(--font-family);
            font-size: 14px;
            font-weight: bold;
            text-anchor: middle;
        }

        .line-connector {
            stroke: var(--blueprint-stroke);
            stroke-width: 1.5;
            fill: none;
            marker-end: url(#arrowhead);
        }
    </style>
</head>
<body>

    <div id="app-container">
        <div id="chat-panel">
            <div id="chat-header">Applifique AI</div>
            <div id="chat-messages">
                <!-- Chat bubbles will be appended here -->
            </div>
        </div>
        <div id="blueprint-panel">
            <button id="start-button">▶️ Start Demo</button>
            <svg id="blueprint-svg" viewBox="0 0 800 1000">
                <defs>
                    <marker id="arrowhead" markerWidth="10" markerHeight="7" refX="0" refY="3.5" orient="auto">
                        <polygon points="0 0, 10 3.5, 0 7" fill="#000000" />
                    </marker>
                    <pattern id="grid" width="20" height="20" patternUnits="userSpaceOnUse">
                        <path d="M 20 0 L 0 0 0 20" fill="none" stroke="rgba(200, 200, 200, 0.5)" stroke-width="0.5"/>
                    </pattern>
                </defs>
                <rect width="100%" height="100%" fill="url(#grid)" />

                <!-- Subgraph Containers -->
                <g id="subgraph-AppCore" class="svg-anim">
                    <text x="400" y="25" class="subgraph-text">App Core</text>
                </g>
                <g id="subgraph-UIComponents" class="svg-anim">
                    <rect x="25" y="145" width="750" height="120" rx="10" class="subgraph-rect"/>
                    <text x="400" y="130" class="subgraph-text">UI Components</text>
                </g>
                 <g id="subgraph-Services" class="svg-anim">
                    <rect x="195" y="345" width="410" height="100" rx="10" class="subgraph-rect"/>
                    <text x="400" y="330" class="subgraph-text">Services</text>
                </g>
                <g id="subgraph-BackendAPI" class="svg-anim">
                    <rect x="25" y="525" width="750" height="120" rx="10" class="subgraph-rect"/>
                    <text x="400" y="510" class="subgraph-text">Backend API</text>
                </g>
                <g id="subgraph-Database" class="svg-anim">
                    <rect x="25" y="745" width="750" height="100" rx="10" class="subgraph-rect"/>
                    <text x="400" y="730" class="subgraph-text">Database</text>
                </g>

                <!-- Nodes -->
                <g id="node-App" class="svg-anim"><rect x="350" y="50" width="100" height="40" rx="5" class="node-rect"/><text x="400" y="70" class="node-text">App</text></g>
                <g id="node-ProductGrid" class="svg-anim"><rect x="50" y="180" width="120" height="50" rx="5" class="node-rect"/><text x="110" y="205" class="node-text">ProductGrid</text></g>
                <g id="node-ShoppingCart" class="svg-anim"><rect x="220" y="180" width="120" height="50" rx="5" class="node-rect"/><text x="280" y="205" class="node-text">ShoppingCart</text></g>
                <g id="node-CheckoutForm" class="svg-anim"><rect x="460" y="180" width="120" height="50" rx="5" class="node-rect"/><text x="520" y="205" class="node-text">CheckoutForm</text></g>
                <g id="node-AIChatWidget" class="svg-anim"><rect x="630" y="180" width="120" height="50" rx="5" class="node-rect"/><text x="690" y="205" class="node-text">AIChatWidget</text></g>
                <g id="node-StripeService" class="svg-anim"><rect x="220" y="380" width="120" height="50" rx="5" class="node-rect"/><text x="280" y="405" class="node-text">StripeService</text></g>
                <g id="node-GeminiService" class="svg-anim"><rect x="460" y="380" width="120" height="50" rx="5" class="node-rect"/><text x="520" y="405" class="node-text">GeminiService</text></g>
                <g id="node-AuthAPI" class="svg-anim"><rect x="50" y="560" width="120" height="50" rx="5" class="node-rect"/><text x="110" y="585" class="node-text">AuthAPI</text></g>
                <g id="node-ProductsAPI" class="svg-anim"><rect x="260" y="560" width="120" height="50" rx="5" class="node-rect"/><text x="320" y="585" class="node-text">ProductsAPI</text></g>
                <g id="node-OrdersAPI" class="svg-anim"><rect x="420" y="560" width="120" height="50" rx="5" class="node-rect"/><text x="480" y="585" class="node-text">OrdersAPI</text></g>
                <g id="node-ChatAPI" class="svg-anim"><rect x="630" y="560" width="120" height="50" rx="5" class="node-rect"/><text x="690" y="585" class="node-text">ChatAPI</text></g>
                <g id="node-UsersTable" class="svg-anim"><rect x="50" y="780" width="120" height="50" rx="5" class="node-rect"/><text x="110" y="805" class="node-text">UsersTable</text></g>
                <g id="node-ProductsTable" class="svg-anim"><rect x="260" y="780" width="120" height="50" rx="5" class="node-rect"/><text x="320" y="805" class="node-text">ProductsTable</text></g>
                <g id="node-OrdersTable" class="svg-anim"><rect x="420" y="780" width="120" height="50" rx="5" class="node-rect"/><text x="480" y="805" class="node-text">OrdersTable</text></g>

                <!-- Connections -->
                <path id="line-App-ProductGrid" class="line-connector svg-line" d="M 370 90 L 370 120 L 110 120 L 110 170"/>
                <path id="line-App-ShoppingCart" class="line-connector svg-line" d="M 390 90 L 390 120 L 280 120 L 280 170"/>
                <path id="line-App-CheckoutForm" class="line-connector svg-line" d="M 410 90 L 410 120 L 520 120 L 520 170"/>
                <path id="line-App-AIChatWidget" class="line-connector svg-line" d="M 430 90 L 430 120 L 690 120 L 690 170"/>
                <path id="line-CheckoutForm-StripeService" class="line-connector svg-line" d="M 520 230 L 520 310 L 280 310 L 280 370"/>
                <path id="line-AIChatWidget-GeminiService" class="line-connector svg-line" d="M 690 230 L 690 310 L 520 310 L 520 370"/>
                <path id="line-StripeService-OrdersAPI" class="line-connector svg-line" d="M 280 430 L 280 490 L 480 490 L 480 550"/>
                <path id="line-GeminiService-ChatAPI" class="line-connector svg-line" d="M 520 430 L 520 490 L 690 490 L 690 550"/>
                <path id="line-AuthAPI-UsersTable" class="line-connector svg-line" d="M 110 610 L 110 770"/>
                <path id="line-ProductsAPI-ProductsTable" class="line-connector svg-line" d="M 320 610 L 320 770"/>
                <path id="line-OrdersAPI-OrdersTable" class="line-connector svg-line" d="M 480 610 L 480 770"/>
            </svg>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const chatMessages = document.getElementById('chat-messages');
            const startButton = document.getElementById('start-button');
            const svg = document.getElementById('blueprint-svg');
            const allLines = svg.querySelectorAll('.svg-line');

            // --- UTILITY FUNCTIONS ---
            const delay = (ms) => new Promise(resolve => setTimeout(resolve, ms));

            const show = (element) => {
                if (element) {
                    element.classList.add('visible');
                }
            };
            
            const draw = (element) => {
                if (element) {
                    const length = element.getTotalLength();
                    element.style.strokeDasharray = length;
                    element.style.strokeDashoffset = length;
                    // Force reflow to apply initial state before transition
                    element.getBoundingClientRect();
                    element.classList.add('drawn');
                }
            };

            const typeMessage = async (msgConfig) => {
                const bubble = document.createElement('div');
                bubble.className = `chat-bubble ${msgConfig.type}`;
                const avatar = document.createElement('div');
                avatar.className = 'avatar';
                avatar.textContent = msgConfig.type === 'user' ? '👤' : '🤖';
                const textContent = document.createElement('div');
                textContent.className = 'text-content';
                const cursor = document.createElement('span');
                cursor.className = 'typing-cursor';
                bubble.appendChild(avatar);
                bubble.appendChild(textContent);
                chatMessages.appendChild(bubble);
                show(bubble);
                chatMessages.scrollTop = chatMessages.scrollHeight;
                textContent.appendChild(cursor);

                for (let i = 0; i < msgConfig.text.length; i++) {
                    textContent.insertBefore(document.createTextNode(msgConfig.text[i]), cursor);
                    await delay(30);
                }
                
                cursor.remove();
                chatMessages.scrollTop = chatMessages.scrollHeight;
            };

            const getElem = (id) => document.getElementById(id);

            // --- MAIN ANIMATION TIMELINE ---
            const runAnimation = async () => {
                // Step 1: First Request
                await typeMessage({ type: 'user', text: "Let's build an e-commerce site." });
                await delay(500);
                show(getElem('subgraph-AppCore'));
                await delay(200);
                show(getElem('node-App'));
                await delay(500);
                show(getElem('subgraph-UIComponents'));
                show(getElem('subgraph-BackendAPI'));
                show(getElem('subgraph-Database'));
                await delay(1000);

                // Step 2: First AI Response & Build
                await typeMessage({ type: 'ai', text: "Great. I've laid out the core structure. What's next?" });
                await delay(500);
                show(getElem('node-ProductGrid'));
                show(getElem('node-ShoppingCart'));
                show(getElem('node-AuthAPI'));
                show(getElem('node-ProductsAPI'));
                show(getElem('node-UsersTable'));
                show(getElem('node-ProductsTable'));
                await delay(500);
                draw(getElem('line-App-ProductGrid'));
                draw(getElem('line-App-ShoppingCart'));
                await delay(200);
                draw(getElem('line-AuthAPI-UsersTable'));
                await delay(200);
                draw(getElem('line-ProductsAPI-ProductsTable'));
                await delay(1500);

                // Step 3: Payment System Request
                await typeMessage({ type: 'user', text: "We need a payment system. Let's use Stripe." });
                await delay(500);
                await typeMessage({ type: 'ai', text: "Understood. Integrating Stripe." });
                await delay(500);
                show(getElem('subgraph-Services'));
                await delay(300);
                show(getElem('node-StripeService'));
                show(getElem('node-CheckoutForm'));
                show(getElem('node-OrdersAPI'));
                show(getElem('node-OrdersTable'));
                await delay(500);
                draw(getElem('line-App-CheckoutForm'));
                await delay(200);
                draw(getElem('line-CheckoutForm-StripeService'));
                await delay(200);
                draw(getElem('line-StripeService-OrdersAPI'));
                await delay(200);
                draw(getElem('line-OrdersAPI-OrdersTable'));
                await delay(1500);

                // Step 4: AI Chatbot Request
                await typeMessage({ type: 'user', text: "Also, add an AI-powered chatbot for customer support." });
                await delay(500);
                await typeMessage({ type: 'ai', text: "Excellent idea. Adding the Gemini-powered chat module." });
                await delay(500);
                show(getElem('node-GeminiService'));
                show(getElem('node-AIChatWidget'));
                show(getElem('node-ChatAPI'));
                await delay(500);
                draw(getElem('line-App-AIChatWidget'));
                await delay(200);
                draw(getElem('line-AIChatWidget-GeminiService'));
                await delay(200);
                draw(getElem('line-GeminiService-ChatAPI'));
                await delay(1500);

                // Step 5: Finale
                await typeMessage({ type: 'ai', text: "Your initial architecture is complete." });
            };

            // Initialize lines for drawing animation
            allLines.forEach(line => {
                const length = line.getTotalLength();
                line.style.strokeDasharray = length;
                line.style.strokeDashoffset = length;
            });

            // --- EVENT LISTENER ---
            startButton.addEventListener('click', () => {
                startButton.style.opacity = 0;
                startButton.style.pointerEvents = 'none';
                runAnimation();
            });
        });
    </script>
</body>
</html>


